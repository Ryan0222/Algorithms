433. Number of Islands

Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

Example
Example 1:

Input:
[
  [1,1,0,0,0],
  [0,1,0,0,1],
  [0,0,0,1,1],
  [0,0,0,0,0],
  [0,0,0,0,1]
]
Output:
3
Example 2:

Input:
[
  [1,1]
]
Output:
1

My thought : use BFS to search every point, for every point if it is a '1', use BFS to collect all its adjacent 
point, and count it as 1 island, then flagged it as visited, then search other point. 
I think time complexity is O(m * n)(Maybe it's not right)

public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    class Point {
        int x, y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    int[] dirX = {1, -1, 0, 0};
    int[] dirY = {0, 0, 1, -1};
    
    public int numIslands(boolean[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == false)
                    continue;
                findIsland(grid, i, j);
                count++;
            }
        }
        return count;
    }
    
    public void findIsland(boolean[][] grid, int x, int y) {
        Queue<Point> q = new LinkedList<>();
        q.offer(new Point(x, y));
        grid[x][y] = false;
        
        while (!q.isEmpty()) {
            Point p = q.poll();
            for (int i = 0; i < 4; i++) {
                    if (isIsland(grid, p.x + dirX[i], p.y + dirY[i])) {
                        q.offer(new Point(p.x + dirX[i], p.y + dirY[i]));
                        grid[p.x + dirX[i]][p.y + dirY[i]] = false;
                    }
            }
        }
    }
    
    
    public boolean isIsland(boolean[][] grid, int x, int y) {
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length) {
            return false;
        }
        if (grid[x][y] == false) {
            return false;
        }
        return true;
    }  
}
